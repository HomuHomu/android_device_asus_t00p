diff --git a/services/surfaceflinger/SurfaceFlinger.cpp b/services/surfaceflinger/SurfaceFlinger.cpp
index 4051b38..21e6a7e 100644
--- a/services/surfaceflinger/SurfaceFlinger.cpp
+++ b/services/surfaceflinger/SurfaceFlinger.cpp
@@ -188,6 +188,18 @@ SurfaceFlinger::SurfaceFlinger()
     ALOGI_IF(mDebugDDMS, "DDMS debugging enabled");
 }
 
+bool isPadExist() {
+    char val[PROPERTY_VALUE_MAX];
+    int hdmiType = 0;
+    property_get("hw.hdmi.type", val, "0");
+    hdmiType = atoi(val);
+    ALOGE("Quarx: HDMI TYPE: %d", hdmiType);
+    if (hdmiType == 2)
+        return true;
+    else
+        return false;
+}
+
 void SurfaceFlinger::onFirstRef()
 {
     mEventQueue.init(this);
@@ -602,6 +614,8 @@ status_t SurfaceFlinger::getDisplayConfigs(const sp<IBinder>& display,
             return getDensityFromProperty("qemu.sf.lcd_density"); }
         static int getBuildDensity()  {
             return getDensityFromProperty("ro.sf.lcd_density"); }
+        static int getPadDensity()  {
+            return getDensityFromProperty("ro.sf.pad_density"); }
     };
 
     configs->clear();
@@ -618,6 +632,12 @@ status_t SurfaceFlinger::getDisplayConfigs(const sp<IBinder>& display,
         if (type == DisplayDevice::DISPLAY_PRIMARY) {
             // The density of the device is provided by a build property
             float density = Density::getBuildDensity() / 160.0f;
+
+            if (!isPadExist())
+                  density = Density::getBuildDensity() / 160.0f;
+            else
+                  density = Density::getPadDensity() / 160.0f;
+
             if (density == 0) {
                 // the build doesn't provide a density -- this is wrong!
                 // use xdpi instead
@@ -892,13 +912,24 @@ void SurfaceFlinger::onHotplugReceived(int type, bool connected) {
 
     if (uint32_t(type) < DisplayDevice::NUM_BUILTIN_DISPLAY_TYPES) {
         Mutex::Autolock _l(mStateLock);
-        if (connected) {
-            createBuiltinDisplayLocked((DisplayDevice::DisplayType)type);
-        } else {
-            mCurrentState.displays.removeItem(mBuiltinDisplays[type]);
-            mBuiltinDisplays[type].clear();
-            updateVisibleRegionsDirty();
+
+	if (!isPadExist()) {
+            if (connected) {
+                createBuiltinDisplayLocked((DisplayDevice::DisplayType)type);
+            } else {
+                mCurrentState.displays.removeItem(mBuiltinDisplays[type]);
+                mBuiltinDisplays[type].clear();
+                updateVisibleRegionsDirty();
+            }
+	} else {
+	    ALOGE("Quarx: What we do?");
+            if (connected) {
+                ALOGE("Quarx: Switch to PAD");
+            } else {
+                ALOGE("Quarx: Switch to Phone");
+            }
         }
+	
         setTransactionFlags(eDisplayTransactionNeeded);
 
         // Defer EventThread notification until SF has updated mDisplays.
